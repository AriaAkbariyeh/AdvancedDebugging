1. Debug the issue using WinDbg. 
2. Load runtime and SOS:

	.cordll -u -l -ve

	or 

	.loadby sos clr   (for .net 4+)


3. Check loaded modules in Applicaiton domains:

	!DumpDomain


4. You can see a lot of dynamic modules are loaded. 

5. It turns out we used a constructor method of  XmlSerializer that creates a new module for optimization purposes. 
   to fix the issue, an overload of XmlSerializer should be used that does not create a new instance of xmlSerilizer and each instance of xmlSerilizer uses assembly generation for optimization purposes.
   See this: 


   https://docs.microsoft.com/en-us/dotnet/api/system.xml.serialization.xmlserializer.-ctor?view=netframework-4.7.2
   https://referencesource.microsoft.com/#System.Xml/System/Xml/Serialization/Compilation.cs,55cb7890e3382ab6,references